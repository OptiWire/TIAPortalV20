# Telegraf Configuration for S7-1200 PLC to InfluxDB
# Last updated: June 2025

# =============================================================================
# GLOBAL CONFIGURATION
# =============================================================================

# Global tags can be specified here in key="value" format.
[global_tags]
  # Add tags that will be applied to all metrics
  plant = "factory_a"
  department = "production"
  # location = "building_1"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs.
  flush_interval = "10s"

  ## Jitter the flush interval by a random amount.
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval.
  precision = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

# =============================================================================
# INPUT PLUGINS - S7 COMMUNICATION
# =============================================================================

# Plugin for retrieving data from Siemens PLCs via the S7 protocol (RFC1006)
[[inputs.s7comm]]
  ## Parameters to contact the PLC (mandatory)
  ## The server is in the <host>[:port] format where the port defaults to 102
  ## if not explicitly specified.
  ## REPLACE WITH YOUR PLC IP ADDRESS
  server = "192.168.1.100:102"
  
  ## Rack and Slot configuration
  ## For S7-1200: typically rack=0, slot=1
  ## For S7-1500: typically rack=0, slot=1  
  ## For S7-300/400: varies by configuration
  rack = 0
  slot = 1

  ## Connection or drive type of S7 protocol
  ## Available options are "PD" (programming device), "OP" (operator panel) or "basic" (S7 basic communication).
  ## "PD" is recommended for most applications
  connection_type = "PD"

  ## Max count of fields to be bundled in one batch-request. (PDU size)
  ## Reduce this if you get communication errors
  pdu_size = 20

  ## Timeout for requests
  timeout = "10s"

  ## Log detailed connection messages for tracing issues
  ## Options: "error", "warn", "info", "debug", "trace"
  ## Set to "trace" for troubleshooting, "info" for normal operation
  # log_level = "info"

  # =============================================================================
  # METRIC DEFINITIONS - PRODUCTION LINE DATA
  # =============================================================================
  
  [[inputs.s7comm.metric]]
    ## Name of the measurement (table name in InfluxDB)
    name = "production_line"

    ## Field definitions
    ## CUSTOMIZE THESE ADDRESSES BASED ON YOUR PLC MEMORY MAP
    ## Format: address = "<area>.<type><address>[.extra]"
    ## 
    ## Areas: DB1, DB2, etc. (Data Blocks), M (Memory), I (Inputs), Q (Outputs)
    ## Types: X (bit), B (byte), C (char), W (word), DW (double word), 
    ##        I (int16), DI (int32), R (real/float32), DT (datetime), S (string)
    ##
    ## Examples:
    ## DB1.R0    = Real value at Data Block 1, byte offset 0
    ## DB1.X2.1  = Bit 1 of byte 2 in Data Block 1
    ## DB1.S10.20 = String starting at byte 10, max length 20 characters
    
    fields = [
      # Process Variables (Real/Float values)
      { name="temperature_1", address="DB1.R0" },        # Temperature sensor 1
      { name="temperature_2", address="DB1.R4" },        # Temperature sensor 2
      { name="pressure_main", address="DB1.R8" },        # Main pressure
      { name="pressure_aux", address="DB1.R12" },        # Auxiliary pressure
      { name="flow_rate", address="DB1.R16" },           # Flow rate
      { name="level_tank_1", address="DB1.R20" },        # Tank 1 level
      { name="level_tank_2", address="DB1.R24" },        # Tank 2 level
      { name="speed_motor_1", address="DB1.R28" },       # Motor 1 speed
      { name="speed_motor_2", address="DB1.R32" },       # Motor 2 speed
      
      # Digital Status (Bit values)
      { name="pump_1_running", address="DB1.X40.0" },    # Pump 1 status
      { name="pump_2_running", address="DB1.X40.1" },    # Pump 2 status
      { name="valve_1_open", address="DB1.X40.2" },      # Valve 1 status
      { name="valve_2_open", address="DB1.X40.3" },      # Valve 2 status
      { name="emergency_stop", address="DB1.X40.4" },    # Emergency stop
      { name="auto_mode", address="DB1.X40.5" },         # Auto mode active
      { name="manual_mode", address="DB1.X40.6" },       # Manual mode active
      { name="alarm_active", address="DB1.X40.7" },      # General alarm
      
      # Counters and Integers
      { name="production_count", address="DB1.DI42" },   # Production counter
      { name="error_count", address="DB1.DI46" },        # Error counter
      { name="cycle_count", address="DB1.DI50" },        # Cycle counter
      { name="error_code", address="DB1.W54" },          # Current error code
      { name="recipe_number", address="DB1.W56" },       # Active recipe
      
      # String data (optional)
      { name="operator_name", address="DB1.S60.20" },    # Operator name (20 chars max)
      { name="product_id", address="DB1.S82.16" },       # Product ID (16 chars max)
      
      # Timestamp (if PLC provides it)
      { name="last_maintenance", address="DB1.DT100" },  # Last maintenance timestamp
    ]

    ## Tags assigned to this metric
    ## These become indexed tags in InfluxDB for efficient querying
    [inputs.s7comm.metric.tags]
      machine = "production_line_1"
      location = "building_a"
      line = "main_production"

  # =============================================================================
  # ADDITIONAL METRIC - QUALITY DATA (Optional second data block)
  # =============================================================================
  
  [[inputs.s7comm.metric]]
    name = "quality_data"
    
    fields = [
      { name="reject_count", address="DB2.DI0" },        # Reject counter
      { name="good_parts", address="DB2.DI4" },          # Good parts counter
      { name="oee_percentage", address="DB2.R8" },       # OEE value
      { name="downtime_minutes", address="DB2.DI12" },   # Downtime in minutes
      { name="quality_check_ok", address="DB2.X16.0" },  # Quality check status
    ]
    
    [inputs.s7comm.metric.tags]
      station = "quality_control"
      line = "main_production"

# =============================================================================
# OUTPUT PLUGINS - INFLUXDB
# =============================================================================

# Configuration for InfluxDB v2.x (RECOMMENDED)
[[outputs.influxdb_v2]]
  ## InfluxDB connection details
  ## REPLACE WITH YOUR INFLUXDB SERVER DETAILS
  urls = ["http://localhost:8086"]
  
  ## Token for authentication (generate in InfluxDB UI)
  ## REPLACE WITH YOUR ACTUAL TOKEN
  token = "your-influxdb-v2-token-here"
  
  ## Organization name
  ## REPLACE WITH YOUR ORGANIZATION NAME
  organization = "your-organization"
  
  ## Destination bucket for storing metrics
  ## REPLACE WITH YOUR BUCKET NAME
  bucket = "s7_plc_data"

  ## Optional settings
  timeout = "5s"
  user_agent = "telegraf"
  
  ## The value of this tag will be used to determine the bucket.
  ## If this tag is not set the 'bucket' option is used as the default.
  # bucket_tag = ""

  ## Precision for timestamps
  ## Options: "ns", "us", "ms", "s"
  precision = "s"

  ## HTTP Proxy settings (if needed)
  # http_proxy = "http://corporate.proxy:3128"

  ## Additional HTTP headers
  # [outputs.influxdb_v2.http_headers]
  #   X-Special-Header = "special-value"

# =============================================================================
# ALTERNATIVE: InfluxDB v1.x Configuration (Uncomment if using v1.x)
# =============================================================================

# [[outputs.influxdb]]
#   ## InfluxDB connection details
#   urls = ["http://localhost:8086"]
#   
#   ## Database name
#   database = "s7_plc_data"
#   
#   ## HTTP Basic Auth
#   username = "your-username"
#   password = "your-password"
#   
#   ## Optional settings
#   timeout = "5s"
#   user_agent = "telegraf"
#   precision = "s"
#   
#   ## Retention policy to write to. Empty string writes to the default rp.
#   retention_policy = ""
#   
#   ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
#   write_consistency = "any"

# =============================================================================
# ADDITIONAL OUTPUT - FILE (For debugging/backup)
# =============================================================================

# Uncomment to also write data to files for debugging
# [[outputs.file]]
#   files = ["stdout", "/tmp/telegraf-s7.out"]
#   data_format = "influx"

# =============================================================================
# PROCESSOR PLUGINS (Optional data processing)
# =============================================================================

# Convert temperature from Celsius to Fahrenheit (example)
# [[processors.converter]]
#   [processors.converter.fields]
#     float = ["temperature_*"]
#   [processors.converter.fields.float.conversions]
#     celsius_to_fahrenheit = {from = "C", to = "F"}

# Add calculated fields (example)
# [[processors.starlark]]
#   script = '''
# def apply(metric):
#     # Calculate efficiency percentage
#     if "good_parts" in metric.fields and "production_count" in metric.fields:
#         if metric.fields["production_count"] > 0:
#             metric.fields["efficiency"] = (metric.fields["good_parts"] / metric.fields["production_count"]) * 100.0
#     return metric
# '''

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================

# BEFORE RUNNING:
# 1. Replace IP address (192.168.1.100) with your actual PLC IP
# 2. Replace InfluxDB connection details (URL, token, org, bucket)
# 3. Customize the field addresses based on your PLC memory map
# 4. Verify rack/slot numbers for your specific PLC model
# 5. Enable PUT/GET communication in your PLC hardware configuration
# 6. Set PLC data blocks to non-optimized access
#
# TO TEST CONFIGURATION:
# telegraf --config telegraf.conf --test
#
# TO RUN:
# telegraf --config telegraf.conf
#
# TROUBLESHOOTING:
# - Set log_level = "trace" in s7comm input for detailed debugging
# - Check network connectivity on port 102
# - Verify PLC security settings allow S7 communication
# - Check InfluxDB logs for write errors
